/**
 * This Api class lets you define an API endpoint and methods to request
 * data and process it.
 *
 * See the [Backend API Integration](https://docs.infinite.red/ignite-cli/boilerplate/app/services/#backend-api-integration)
 * documentation for more details.
 */
import {AccomodationItemSnapshotIn} from '@/models/AccomodationItem'
import {DestinationSnapshotIn} from '@/models/Destination'
import {PresetTodoContentSnapshotIn, TodoSnapshotIn} from '@/models/Todo'
import {TripStore, TripStoreSnapshot} from '@/models/TripStore'
import {ApiResponse, ApisauceInstance, create} from 'apisauce'
import {
  type ApiConfig,
  type ApiPresetResponse,
  TodoPresetDTO,
  TodoDTO,
  type TripDTO,
  WithStatus,
  mapToTodo,
  mapToTodoDTO,
  mapToTrip,
  mapToTripDTO,
  mapToPresetTodo,
} from './api.types'
import {GeneralApiProblem, getGeneralApiProblem} from './apiProblem'

export interface CreateTodoRequest {
  category?: string
  presetId?: number
}

type ApiResult<T> = {kind: 'ok'; data: T} | GeneralApiProblem

/**
 * Configuring the apisauce instance.
 */
export const DEFAULT_API_CONFIG: ApiConfig = {
  baseURL: process.env.EXPO_PUBLIC_API_URL,
  //   withCredentials: true,
  timeout: 10000,
}

/**
 * Manages all requests to the API. You can use this class to build out
 * various requests that you need to call from your backend API.
 */
export class Api {
  apisauce: ApisauceInstance
  config: ApiConfig

  /**
   * Set up our API instance. Keep this lightweight!
   */
  constructor(config: ApiConfig = DEFAULT_API_CONFIG) {
    this.config = config
    this.apisauce = create({
      ...config,
      headers: {
        Accept: 'application/json',
      },
    })
    // function getCookie(name: String) {
    //   const value = `; ${document.cookie}`
    //   const parts = value.split(`; ${name}=`)
    //   if (parts.length === 2) return parts.pop()?.split(';').shift()
    // }

    // this.apisauce.addRequestTransform(async request => {
    //   const csrfToken = getCookie('csrftoken') // Function to get token from cookie

    //   if (csrfToken && request.headers) {
    //     request.headers['X-CSRFToken'] = csrfToken
    //   }
    // })
  }

  handleResponse<T>(response: ApiResponse<T>): ApiResult<T> {
    if (!response.ok) {
      const problem = getGeneralApiProblem(response)
      if (problem) return problem
    }
    try {
      if (!response.data) {
        throw Error
      }
      return {
        kind: 'ok',
        data: response.data,
      }
    } catch (e) {
      if (__DEV__ && e instanceof Error) {
        console.error(`Bad data: ${e.message}\n${response.data}`, e.stack)
      }
      return {kind: 'bad-data'}
    }
  }

  handleDeleteResponse(response: ApiResponse<void>): ApiResult<null> {
    if (!response.ok) {
      const problem = getGeneralApiProblem(response)
      if (problem) return problem
    }
    console.log(
      `[handleDeleteResponse] response.status=${response.status} response=${response}`,
    )
    try {
      if (response.status !== 204) {
        throw Error
      }
      return {
        kind: 'ok',
        data: null,
      }
    } catch (e) {
      if (__DEV__ && e instanceof Error) {
        console.error(`Bad data: ${e.message}\n${response.data}`, e.stack)
      }
      return {kind: 'bad-data'}
    }
  }

  /**
   * Gets a Trip data with given id.
   * @returns {kind} - Response Status.
   * @returns {...Trip} - Trip.
   */
  async getCsrf(): Promise<ApiResult<void>> {
    const response: ApiResponse<void> = await this.apisauce.get(`csrf`)
    return this.handleResponse<void>(response)
  }

  /* Trip & Trip.todolist CRUD APIS */

  /**
   * Gets a Trip data with given id.
   * @returns {kind} - Response Status.
   * @returns {...Trip} - Trip.
   */
  async getTrip(id: string): Promise<ApiResult<TripStoreSnapshot>> {
    const response: ApiResponse<TripDTO> = await this.apisauce.get(`trip/${id}`)

    const tripDTO = this.handleResponse<TripDTO>(response)
    return tripDTO.kind === 'ok'
      ? {
          kind: 'ok',
          data: mapToTrip(tripDTO.data),
        }
      : tripDTO
  }
  /**
   * Create a new Trip and get id generated by B/E.
   * @returns {kind} - Response Status.
   * @returns {id} - Trip Id.
   */
  async createTrip(): Promise<ApiResult<TripStoreSnapshot>> {
    const response: ApiResponse<TripDTO> = await this.apisauce.post(`/trip`)

    const tripDTO = this.handleResponse<TripDTO>(response)
    return tripDTO.kind === 'ok'
      ? {
          kind: 'ok',
          data: mapToTrip(tripDTO.data),
        }
      : tripDTO
  }

  /**
   * Update todolist of the trip.
   * @returns {kind} - Response Status.
   * @returns {...Trip} - Updated Trip.
   */
  async patchTrip(trip: TripStore): Promise<ApiResult<TripStoreSnapshot>> {
    const response: ApiResponse<TripDTO> = await this.apisauce.patch(
      `/trip/${trip.id}`,
      mapToTripDTO(trip),
    )

    const tripDTO = this.handleResponse<TripDTO>(response)
    return tripDTO.kind === 'ok'
      ? {
          kind: 'ok',
          data: mapToTrip(tripDTO.data),
        }
      : tripDTO
  }

  /**
   * Update todolist of the trip.
   * @returns {kind} - Response Status.
   * @returns {...Trip} - Updated Trip.
   */
  //   async patchTodolist(
  //     trip: TripStore,
  //   ): Promise<({kind: 'ok'} & TripStoreSnapshot) | GeneralApiProblem> {
  //     console.log('patchTodolist')
  //     // make the api call
  //     const response: ApiResponse<TripDTO> = await this.apisauce.patch(
  //       `trip/${trip.id}/todolist`,
  //       {todolist: mapToTripDTO(trip).todolist},
  //     )

  //     if (!response.ok) {
  //       const problem = getGeneralApiProblem(response)
  //       if (problem) return problem
  //     }

  //     try {
  //       const rawData = response.data
  //       if (!rawData) {
  //         throw Error
  //       }
  //       return {
  //         kind: 'ok',
  //         ...mapToTrip(rawData),
  //       }
  //     } catch (e) {
  //       if (__DEV__ && e instanceof Error) {
  //         console.error(`Bad data: ${e.message}\n${response.data}`, e.stack)
  //       }
  //       return {kind: 'bad-data'}
  //     }
  //   }

  /* Todo CRUD APIS */

  /**
   * Create todo.
   * @returns {kind} - Response Status.
   * @returns {...Trip} - Updated Trip.
   */
  async createTodo({
    tripId,
    category,
    presetId,
  }: Partial<Pick<TodoSnapshotIn, 'category'>> & {
    tripId: string
    presetId?: string
  }): Promise<ApiResult<TodoSnapshotIn>> {
    const response: ApiResponse<TodoDTO> = await this.apisauce.post(
      `/trip/${tripId}/todo`,
      {category, presetId: Number(presetId)},
    )

    const todoDTOResponse = this.handleResponse<TodoDTO>(response)
    return todoDTOResponse.kind === 'ok'
      ? {
          kind: 'ok',
          data: mapToTodo(todoDTOResponse.data),
        }
      : todoDTOResponse
  }

  /**
   * Update todo.
   * @returns {kind} - Response Status.
   * @returns {...Todo} - Updated Trip.
   */
  async patchTodo(
    tripId: string,
    todo: TodoSnapshotIn,
  ): Promise<ApiResult<TodoSnapshotIn>> {
    const response: ApiResponse<TodoDTO> = await this.apisauce.patch(
      `/trip/${tripId}/todo/${todo.id}`,
      mapToTodoDTO(todo),
    )

    const todoDTOResponse = this.handleResponse<TodoDTO>(response)
    return todoDTOResponse.kind === 'ok'
      ? {
          kind: 'ok',
          data: mapToTodo(todoDTOResponse.data),
        }
      : todoDTOResponse
  }

  /**
   * Update todo.
   * @returns {kind} - Response Status.
   * @returns {...Todo} - Updated Trip.
   */
  async deleteTodo(tripId: string, todoId: string): Promise<ApiResult<null>> {
    const response: ApiResponse<void> = await this.apisauce.delete(
      `/trip/${tripId}/todo/${todoId}`,
    )
    return this.handleDeleteResponse(response)
  }

  /**
   * Gets a list of recent React Native Radio episodes.
   */
  async getTodoPreset(
    id: string,
  ): Promise<ApiResult<PresetTodoContentSnapshotIn[]>> {
    const response: ApiResponse<TodoPresetDTO[]> = await this.apisauce.get(
      `/trip/${id}/todoPreset`,
    )
    const presetResponse = this.handleResponse<TodoPresetDTO[]>(response)
    return presetResponse.kind === 'ok'
      ? {
          ...presetResponse,
          data: presetResponse.data.map(presetDTO =>
            mapToPresetTodo(presetDTO),
          ),
        }
      : presetResponse
  }

  /**
   * Gets a list of recent React Native Radio episodes.
   */
  async createDestination(
    tripId: string,
    destination: Partial<DestinationSnapshotIn>,
  ): Promise<ApiResult<DestinationSnapshotIn>> {
    // make the api call
    const response: ApiResponse<DestinationSnapshotIn> =
      await this.apisauce.post(`trip/${tripId}/destination`, destination)

    return this.handleResponse<DestinationSnapshotIn>(response)
  }

  /**
   * Update todo.
   * @returns {kind} - Response Status.
   * @returns {...Todo} - Updated Trip.
   */
  async deleteDestination(
    tripId: string,
    destinationId: string,
  ): Promise<ApiResult<void>> {
    const response: ApiResponse<void> = await this.apisauce.delete(
      `/trip/${tripId}/destination/${destinationId}`,
    )

    return this.handleResponse<void>(response)
  }

  /**
   * Gets a list of recent React Native Radio episodes.
   */
  //   async getAccomodationItem(): Promise<ApiResult<AccomodationItemSnapshotIn[]>> {
  //     const response: ApiResponse<AccomodationItemSnapshotIn[]> =
  //       await this.apisauce.get(`trip/1/accomodation`)

  //     const accomodationDTO =
  //       this.handleResponse<AccomodationItemSnapshotIn[]>(response)
  //     return accomodationDTO
  //   }

  /**
   * Gets a list of recent React Native Radio episodes.
   */
  async createAccomodation(
    id: string,
  ): Promise<ApiResult<Partial<AccomodationItemSnapshotIn>>> {
    // make the api call
    const response: ApiResponse<Partial<AccomodationItemSnapshotIn>> =
      await this.apisauce.get(`trip/${id}/accomodation`)

    return this.handleResponse<Partial<AccomodationItemSnapshotIn>>(response)
  }

  /**
   * Update todo.
   * @returns {kind} - Response Status.
   * @returns {...Todo} - Updated Trip.
   */
  async patchAccomodation(
    tripId: string,
    accomodation: AccomodationItemSnapshotIn,
  ): Promise<ApiResult<Partial<AccomodationItemSnapshotIn>>> {
    const response: ApiResponse<Partial<AccomodationItemSnapshotIn>> =
      await this.apisauce.patch(
        `/trip/${tripId}/accomodation/${accomodation.id}`,
        accomodation,
      )

    const accomodationDTO =
      this.handleResponse<Partial<AccomodationItemSnapshotIn>>(response)
    return accomodationDTO
  }
  /**
   * Update todo.
   * @returns {kind} - Response Status.
   * @returns {...Todo} - Updated Trip.
   */
  async deleteAccomodation(
    tripId: string,
    accomodationId: string,
  ): Promise<ApiResult<void>> {
    const response: ApiResponse<void> = await this.apisauce.delete(
      `/trip/${tripId}/accomodation/${accomodationId}`,
    )

    return this.handleResponse<void>(response)
  }
}

// Singleton instance of the API for convenience
export const api = new Api()
